#!/usr/bin/env php
<?php

error_reporting(E_ERROR | E_PARSE);

/* autoload */

include dirname(__DIR__) . '/vendor/autoload.php';

$providerArray =
[
	'porn.com' =>
	[
		'url' => 'https://api.porn.com',
		'endpoint' =>
		[
			'videos' => '/videos/find.json',
			'actors' => '/actors/find.json',
			'channels' => '/channels/find.json',
			'dvds' => '/dvds/find.json',
		]
	],
	'pornhub.com'  =>
	[
		'url' => 'https://pornhub.com',
		'endpoint' =>
		[
			'videos' => '/webmasters/search'
		]
	]
];

/* set command */

$command = new Commando\Command();
$command
	->option('p')
	->aka('api-provider')
	->describe('API provider. (porn.com, pornhub.com)')
	->default('porn.com')
	->required()
	->option('e')
	->aka('api-endpoint')
	->describe('API endpoint. (porn.com: videos, actors, channels, dvds; pornhub.com: videos.')
	->default('videos')
	->required()
	->option('q')
	->aka('api-query')
    ->default('?limit=100')
	->describe('API query.')
	->option('r')
	->aka('image-resize')
	->describe('Resize the image.')
	->default(0.5)
	->option('i')
	->aka('image-invert')
	->describe('Invert the image.')
	->boolean()
	->option('w')
	->aka('image-weight')
	->describe('Weight of the image.')
	->default(1)
	->option('d')
	->aka('image-dither')
	->describe('Dither of the image.')
	->default(1)
	->boolean()
	->option('g')
	->aka('image-grayscale')
	->describe('Grayscale of the image.')
	->boolean()
	->option('m')
	->aka('image-metadata')
	->describe('Metadata of the image.')
	->boolean()
	->option('o')
	->aka('open-browser')
	->describe('Open URL in browser.')
	->boolean();

/* get content */

$provider = $providerArray[$command['p']];
$url = $provider['url'] . $provider['endpoint'][$command['e']] . $command['q'];
$content = json_decode(file_get_contents($url));

/* handle result */

if ($content->result)
{
	$total = count($content->result);
	$result = $content->result{mt_rand(0, $total)};
}
if ($content->videos)
{
	$total = count($content->videos);
	$result = $content->videos{mt_rand(0, $total)};
}

/* handle image */

if ($result)
{
	$image = Pixeler\Pixeler::image($result->thumb, $command['r'], $command['i'], $command['w'], $command['d']);
	if ($command['g'])
	{
		$image->clearColors();
	}
	$output = $image;

	/* image metadata */

	if ($command['m'])
	{
		if ($result->title)
		{
			$output .= 'Title: ' . $result->title . PHP_EOL;
		}
		if ($result->name)
		{
			$output .= 'Name: ' . $result->name . PHP_EOL;
		}
		if ($result->url)
		{
			$output .= 'URL: ' . $result->url . PHP_EOL;
		}
		if ($result->rating)
		{
			$output .= 'Rating: ' . $result->rating . PHP_EOL;
		}
		if ($result->duration)
		{
			$output .= 'Duration: ' . $result->duration . 's' . PHP_EOL;
		}
	}

	/* open browser */

	if ($result->url && $command['o'])
	{
		if (PHP_OS === 'Linux')
		{
			exec('xdg-open ' . $result->url);
		}
		else
		{
			exec('open ' . $result->url);
		}
	}
	echo $output;
}
else
{
	$command->beepOnError();
}
